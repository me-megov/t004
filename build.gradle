buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:3.3.4'
    }
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin

import com.bmuschko.gradle.docker.tasks.image.*
import com.bmuschko.gradle.docker.tasks.container.*

mainClassName = 'me.megov.emc.t004.Main';

if (!hasProperty('mainClass')) {
    ext.mainClass = "$mainClassName"
}

repositories {
    jcenter()
    mavenCentral()
}


sourceSets {
    main {
        java {
            srcDir 'src'
        }
    }

    test {
	java {
	    srcDir 'test'
	}
    }
}


dependencies {
    testCompile 'junit:junit:4.12'
}

dependencies {
    compile group: 'com.google.guava', name: 'guava', version: '23.0'
}


jar {
  manifest {
    attributes(
      'Main-Class': "$mainClassName",
      'Class-Path': configurations.runtimeClasspath.files.collect { it.getName() }.join(' ')
    )
    }
}


task copyToLib(type: Copy) {
    into "$buildDir/libs"
    from configurations.runtime
}

build.dependsOn(copyToLib)


task genLarge(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'me.megov.emc.t004.MainGenerator';
  args = ["/data", "75", "4", "1000000000000"]
}

task genSmall(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'me.megov.emc.t004.MainGenerator';
  args = ["/data", "3", "3", "10000000"]
  //debug = true;
}

task genMid(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'me.megov.emc.t004.MainGenerator';
  args = ["/data", "10", "4", "100000000000"]
}

task runSeq(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'me.megov.emc.t004.Main';
  args = ["--isSaveStats=1", "--isDebug=1", "--logProcessor=SEQ", "--logProcessorLookup=TRM" ]
}

task runZ(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'me.megov.emc.t004.MainV6Out';
  args = ["--isSaveStats=1", "--isDebug=1", "--logProcessor=SEQ", "--logProcessorLookup=TRM" ]
}

task runSeqAut(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'me.megov.emc.t004.Main';
  args = ["--isSaveStats=1", "--isDebug=1", "--logProcessor=SEQ", "--logProcessorLookup=AUT" ]
}

task runPar1(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'me.megov.emc.t004.Main';
  args = ["--isSaveStats=1", "--isDebug=1", "--logProcessor=PAR", "--logProcessorTask=NIO", "--logProcessorLookup=TRM", "--taskCount=1" ]
}

task runPar2(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'me.megov.emc.t004.Main';
  args = ["--isSaveStats=1", "--isDebug=1", "--logProcessor=PAR", "--logProcessorTask=NIO", "--logProcessorLookup=TRM", "--taskCount=2" ]
}

task runPar4(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'me.megov.emc.t004.Main';
  args = ["--isSaveStats=1", "--isDebug=1", "--logProcessor=PAR", "--logProcessorTask=NIO", "--logProcessorLookup=TRM", "--taskCount=4" ]
}

task runPar8(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'me.megov.emc.t004.Main';
  args = ["--isSaveStats=1", "--isDebug=1", "--logProcessor=PAR", "--logProcessorTask=NIO", "--logProcessorLookup=TRM", "--taskCount=8" ]
}

task runPar12(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'me.megov.emc.t004.Main';
  args = ["--isSaveStats=1", "--isDebug=1", "--logProcessor=PAR", "--logProcessorTask=NIO", "--logProcessorLookup=TRM", "--taskCount=12" ]
}

task runPar1Aut(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'me.megov.emc.t004.Main';
  args = ["--isSaveStats=1", "--isDebug=1", "--logProcessor=PAR", "--logProcessorTask=NIO", "--logProcessorLookup=AUT", "--taskCount=1" ]
}

task runPar2Aut(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'me.megov.emc.t004.Main';
  args = ["--isSaveStats=1", "--isDebug=1", "--logProcessor=PAR", "--logProcessorTask=NIO", "--logProcessorLookup=AUT", "--taskCount=2" ]
}

task runPar4Aut(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'me.megov.emc.t004.Main';
  args = ["--isSaveStats=1", "--isDebug=1", "--logProcessor=PAR", "--logProcessorTask=NIO", "--logProcessorLookup=AUT", "--taskCount=4" ]
}

task runPar8Aut(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'me.megov.emc.t004.Main';
  args = ["--isSaveStats=1", "--isDebug=1", "--logProcessor=PAR", "--logProcessorTask=NIO", "--logProcessorLookup=AUT", "--taskCount=8" ]
}

task runPar12Aut(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'me.megov.emc.t004.Main';
  args = ["--isSaveStats=1", "--isDebug=1", "--logProcessor=PAR", "--logProcessorTask=NIO", "--logProcessorLookup=AUT", "--taskCount=12" ]
}

task runMMap(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'me.megov.emc.t004.Main';
  args = ["--isSaveStats=1", "--isDebug=1", "--logProcessor=PAR", "--logProcessorTask=MMAP"]
}


task dckCreateDockerfile(type: Dockerfile) {
    destFile = project.file('Dockerfile')
    from 'openjdk:8-jdk-alpine'
    println 'Hello ' + project.projectDir
    addFile('build/libs', '/app')
    addFile('files/runner.sh', '/app/runner.sh')
    runCommand('mkdir /data')
    volume '/data'
    environmentVariable('JAVA_OPTS', '""')
    entryPoint('sh', '-c', '/app/runner.sh /app/'+jar.archiveName)
}

task dckBuildImage(type: DockerBuildImage) {
    dependsOn dckCreateDockerfile
    inputDir = dckCreateDockerfile.destFile.parentFile
    tag = "$project.name:latest"
}

task dckCreateContainer(type: DockerCreateContainer) {
    dependsOn dckBuildImage
    targetImageId { dckBuildImage.getImageId() }
    volumes = [ '/data' ]
    binds = [ "$project.projectDir/data" : '/data' ]
}

task dckStart(type: DockerStartContainer) {
    dependsOn dckCreateContainer
    targetContainerId { dckCreateContainer.getContainerId() }
}


task dckLog(type: DockerLogsContainer) {
    dependsOn dckStart
    targetContainerId { dckStart.getContainerId() }
    follow = true
    tailAll = true
    onNext { message ->
        logger.quiet message.toString() // each log message from the container will be passed as it's made available
    }
}


task hello { 
    doLast { 
        println 'Hello, World!'
    }
}

